{
  ;; This is your main proton configuration file
  ;; While using proton, all atom related configuration has to go inside here
  ;; Everything that is not set up through this file will get wiped on start
  ;; We gave you some cool defaults below but if you don't like it, feel free to change :)

  ;; Layers you wish to have active
  ;; To get a list of all available layers, check github.com/dvcrn/proton/tree/master/src/cljs/proton/layers
  :layers
  [
    ;; -----------------------------------
    ;; core layer. Don't remove.
    ;; -----------------------------------
    :core
    [
    ;; core configuration
    ;; ["core.useTreeSitterParsers" false]
    ]

    ;; -----------------------------------
    ;; tools
    ;; Get more at github.com/dvcrn/proton/tree/master/src/cljs/proton/layers/tools
    ;; -----------------------------------
    :tools/git
    :tools/linter
    ;; :tools/bookmarks
    ;; :tools/build
    :tools/minimap
    :tools/terminal

    :apps/notes

    ;; -----------------------------------
    ;; Languages
    ;; Get more at github.com/dvcrn/proton/tree/master/src/cljs/proton/layers/lang
    ;; -----------------------------------
    ;; :lang/clojure
    ;; :lang/csharp
    :lang/go
    ;; :lang/python
    ;; :lang/julia
    ;; :lang/latex
    ;; :lang/elixir
    ;; :lang/markdown
    ;; :lang/rust
    ;; :lang/javascript

    ;; -----------------------------------
    ;; Frameworks
    ;; Get more at github.com/dvcrn/proton/tree/master/src/proton/layers/frameworks
    ;; -----------------------------------
    ;; :frameworks/django

    ;; -----------------------------------
    ;; etc
    ;; Get more at github.com/dvcrn/proton/tree/master/src/cljs/proton/layers/fun
    ;; -----------------------------------
    ;; :fun/power_mode
  ]

  ;; Packages that are not part of a layer. List them here as keyword
  ;; All packages will be ensured to be installed. Stuff that is not listed here
  ;; Will get uninstalled so choose wisely!
  :additional-packages
  [
    ;; :pigments
    :language-hyperlink
    :click-link
    :atom-monokai
    ;; :kite
    :minimap-autohide

    :go-signature-statusbar
    :atom-ide-ui
    ;; :jedi
  ]

  ;; Packages that you want to disable.
  ;; Note that packages will be removed except bundled packages.
  ;; Bundled packages will be disabled instead.
  ;; Use this configuration instead of atom's `core.disabledPackages`
  :disabled-packages [
    ;; :autoupdate-packages
    ;; :about
    ;; :welcome
  ]
  ;; Proton takes over your atom configuration. All settings that are not listed here will get wiped
  ;; Configurations are denoted as 2 element vector consisting of k/v
  ;; sub-vectors inside v will get treated like javascript arrays
  :configuration
  [
    ;; core configuration
    ;; ["core.useTreeSitterParsers" false]

    ;; atom-ide configuration
    ["atom-ide-ui.atom-ide-code-format.formatOnSave" true]
    ["atom-ide-ui.use.atom-ide-diagnostics-ui" never]

    ;; appearance
    ;; ["editor.fontFamily" "FiraFlott"]
    ;; ["editor.fontFamily" "FiraCode-Medium"]
    ;; ["editor.fontFamily" "DejaVuSansMono"]
    ["editor.fontSize" "13"]
    ["editor.preferredLineLength" "120"]
    ["editor.showInvisibles" true]
    ["editor.lineHeight" "1.5"]
    ["editor.tabLength" "4"]
    ;; ["editor.softWrapAtPreferredLineLength" true]

    ;; the current default theme
    ["core.themes" ["nucleus-dark-ui" "atom-monokai"]]
    ;; here are some more popular theme ideas for you to pick from:
    ;; ["core.themes" ["atom-material-ui" "atom-material-syntax"]]
    ;; ["core.themes" ["nucleus-dark-ui" "atom-dark-fusion-syntax"]]
    ;; ["core.themes" ["one-dark-ui" "one-dark-syntax"]]

    ;; proton configuration
    ["proton.core.showTabBar" true]
    ["proton.core.relativeLineNumbers" true]

    ;; prefer classic vim mode over vim-mode-plus? Change this to :vim-mode
    ["proton.core.inputProvider" :vim-mode-plus]
  ]
  ;; Don't like a keybinding or want to add something yourself? Do it here
  ;; The following example adds a category `foo-category` under <SPC>z
  ;; and adds a action under `y` with the title `execute hello`.
  ;; Upon executing, proton will dispatch the action `hello` on the current view
  ;;
  ;; :keybindings {:z {:category "foo-category"
  ;;                  :y {:title "execute hello"
  ;;                      :action "hello"}}}

  :keybindings
  {
    :c {:category "comment"
        :l {:action "editor:toggle-line-comments"
            :target ".editor.is-focused"
            :title "toggle-line-comments"}}

    :u {:category "user-bound"
        :u {:action "command-palette:toggle"
            :target ".editor.is-focused"
            :title "command-palette"}
        :s {:action "editor:insert-def-snippet"
            :target ".editor.is-focused"
            :title "insert function"}}

    :o {:category "open"
        :f {:action "fuzzy-finder:toggle-file-finder"
            :target ".editor.is-focused"
            :title "file"}
        :o {:action "fuzzy-finder:toggle-file-finder"
            :target ".editor.is-focused"
            :title "file"}
        :g {:action "fuzzy-finder:toggle-git-status-finder"
            :target ".editor.is-focused"
            :title "git-status"}
        :b {:action "fuzzy-finder:toggle-buffer-finder"
            :target ".editor.is-focused"
            :title "buffer"}}

    :i {:category "insert"
        :p {:category "python-snippet"
            :f {:action "editor:insert-snippet-python-def"
                :target ".editor.is-focused"
                :title "insert function"}
            }
        :s {:category "scrapy-snippet"
            :m {:action "editor:insert-snippet-scrapy-meta"
                :target ".editor.is-focused"
                :title "insert meta"}
            :r {:action "editor:insert-snippet-scrapy-response-css"
                :target ".editor.is-focused"
                :title "insert response.css"}
            :c {:action "editor:insert-snippet-scrapy-item-add-css"
                :target ".editor.is-focused"
                :title "insert item.add_css"}
            :x {:action "editor:insert-snippet-scrapy-item-add-xpath"
                :target ".editor.is-focused"
                :title "insert item.add_xpath"}
            :v {:action "editor:insert-snippet-scrapy-item-add-value"
                :target ".editor.is-focused"
                :title "insert item.add_value"}
            :l {:action "editor:insert-snippet-scrapy-colour-log"
                :target ".editor.is-focused"
                :title "insert colour_log method"}
            }
        }

    :w {:w {:action "window:focus-next-pane"
            :target ".editor.is-focused"
            :title "focus-next-pane"}
        :tab {:action "vim-mode-plus:next-tab"
            :target ".editor.is-focused"
            :title "focus-next-tab"}
        }

    :f {:f {:action "fuzzy-finder:toggle-file-finder"
            :target ".editor.is-focused"
            :title "fuzzy find file"}
        :g {:action "project-find:show"
            :target ".editor.is-focused"
            :title "grep project"}
        :e {:R {:action "window:reload"
                    :target ".editor.is-focused"
                    :title "reload"}}
        }

    :t {:d {:action "window:toggle-dev-tools"
            :target ".editor.is-focused"
            :title "dev tools"}
        }

    :> {:action "editor:auto-indent"
        :target ".editor.is-focused"
        :title "auto-indent"}
  }
  ;; Want some custom behavior inside a certain window?
  ;; Add your own nifty things here!
  :keymaps [{:selector ".tree-view" :keymap [["escape" "tree-view:toggle"]]}
            ;; Want to rebind ESC to something else? You can do that here.
            ;; If you are good with esc, just remove the following line.
            {:selector "atom-text-editor.vim-mode-plus:not(.normal-mode)" :keymap [["f d" "vim-mode-plus:activate-normal-mode"]]}
            ;; {:selector "atom-text-editor.vim-mode:not(.normal-mode)" :keymap [["f d" "vim-mode:activate-normal-mode"]]}
  ]


  ;; for custom keybound snippets, use this format in the init.coffee file:

  ;; atom.commands.add 'atom-text-editor', 'editor:insert-snippet-python-def': ->
  ;;    snippetBody = 'def ${1:fname}(${2:arg}):\n\t${3:pass}'
  ;;    atom.packages.activePackages.snippets?.mainModule?.insert snippetBody

}
